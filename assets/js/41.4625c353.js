(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{463:function(t,a,s){t.exports=s.p+"assets/img/spa.ae4c52f9.jpg"},464:function(t,a,s){t.exports=s.p+"assets/img/vite.2bcf67e0.png"},507:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"面试解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面试解析"}},[t._v("#")]),t._v(" 面试解析 💩")]),t._v(" "),a("h3",{attrs:{id:"vue2和vue3的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2和vue3的区别"}},[t._v("#")]),t._v(" vue2和vue3的区别")]),t._v(" "),a("ol",[a("li",[t._v("在性能提升上：")])]),t._v(" "),a("ul",[a("li",[t._v("vue3做了很多优化，更快的虚拟dom、响应式系统的改进，更高效的组件渲染和更新机制；使得vue3整体性能比vue2提升了很多，尤其是大规模应用中；")]),t._v(" "),a("li",[t._v("vue2相对较慢，特别是处理复杂的渲染和大型数据；")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("响应式系统：")])]),t._v(" "),a("ul",[a("li",[t._v("vue3采用了基于Proxy的响应式系统，能够更精确的追踪对象的属性变化，避免了一些vue2的局限性，如不支持新属性的检测，或者数组的某些变更无法被侦测到；")]),t._v(" "),a("li",[t._v("vue2采用了Object.defineProperty,虽然支持数据双向绑定，但有些限制，如无法检测新属性的添加和删除，数组索引的变化也难以追踪；")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("Composition API（组合式API）：")])]),t._v(" "),a("ul",[a("li",[t._v("vue3中引入了Composition API，提供了更加灵活和可组合的方式来管理组件的逻辑。他比vue2中的Options API更佳注重逻辑服用，适合复杂组件和大型应用；")]),t._v(" "),a("li",[t._v("vue2只有Options API，即使用data、methods、computed等选项来定义组件行为，不如vue3灵活")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("fragment、Teleport和Suspense：")])]),t._v(" "),a("ul",[a("li",[t._v("vue3引入了新的内置组件，如 Fragment（允许组件返回多个根节点）、Teleport（用于将元素传送到 DOM 的其他位置）、Suspense（用于异步组件的加载状态处理）。这些特性增强了 Vue 3 的灵活性和功能性。")]),t._v(" "),a("li",[t._v("vue2没有这些功能，组件必须有一个单一的根节点，并且需要依赖外部库来实现类似的功能。")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("性能优化：Tree Shaking 和更小的包体积")])]),t._v(" "),a("ul",[a("li",[t._v("vue3通过将 Vue 3 的核心模块拆分，使得 Vue 的包体积更小，并且支持 Tree Shaking，意味着在构建过程中只会包含实际使用到的功能，从而减小最终的打包文件体积；")]),t._v(" "),a("li",[t._v("vue2虽然也支持一些优化，但 Vue 3 在包体积和 Tree Shaking 方面做得更好。")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("生命周期钩子")])]),t._v(" "),a("ul",[a("li",[t._v("vue3中的生命周期钩子函数名称有所变化。例如，beforeCreate 和 created 改为 setup() 函数中的逻辑，更多的生命周期钩子函数被添加到了 Composition API 中；")]),t._v(" "),a("li",[t._v("vue2传统的生命周期钩子，如 beforeCreate、created、mounted 等依然存在，但这些都是基于 Options API 的方式。")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[t._v("自定义事件")])]),t._v(" "),a("ul",[a("li",[t._v("vue3改进了自定义事件的处理方式，使得自定义事件的传递更加灵活和清晰。")]),t._v(" "),a("li",[t._v("vue2自定义事件依赖于 this.$emit 和父子组件间的事件传递")])]),t._v(" "),a("h3",{attrs:{id:"vue3虚拟dom的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3虚拟dom的优化"}},[t._v("#")]),t._v(" vue3虚拟dom的优化")]),t._v(" "),a("ol",[a("li",[t._v("基于 Proxy 的响应式系统")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 2 使用 Object.defineProperty 来实现响应式系统，这样的实现方式会在组件更新时引发一系列的性能问题，尤其在处理嵌套对象和数组时，Vue 2 需要通过遍历对象的属性来监听变化。")]),t._v(" "),a("li",[t._v("Vue 3 则采用了 Proxy 来替代 Object.defineProperty。Proxy 可以直接拦截对象的访问和修改操作，不仅支持更细粒度的变化追踪（如属性添加、删除等），而且能够更高效地检测变化。这样减少了不必要的 re-render 和更新的次数，提升了性能。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("静态树优化")])]),t._v(" "),a("ul",[a("li",[t._v("在 Vue 2 中，虚拟 DOM 每次更新时，都会重新比较所有的节点，包括那些从未改变的静态节点。这样会浪费性能，尤其是在组件较大的情况下。")]),t._v(" "),a("li",[t._v("Vue 3 对静态树做了优化，通过 静态标记，标记哪些节点是静态的，不会在更新时重新渲染。这些静态节点将不会参与更新的过程，从而节省了渲染和比较的时间。")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("优化的 Diff 算法")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 3 使用了更高效的 Diff 算法来进行虚拟 DOM 比较。Vue 3 采用了 "),a("strong",[t._v("双端 Diff 算法")]),t._v("，即在更新过程中，首先比较从左侧和右侧逐个节点，优先从两端进行匹配。这种算法优化了 Vue 2 中的单端比较方式，减少了比较的时间复杂度。")]),t._v(" "),a("li",[t._v("另外，Vue 3 对动态和静态节点的处理也有所优化，静态节点会被单独处理，避免不必要的重新比较。")])]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("Lazy Activation (懒激活)")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 3 引入了懒激活机制。当组件的虚拟 DOM 中包含异步组件时，这些组件的激活会延迟到它们实际需要时，避免了在初次渲染时过多的异步请求和计算，减少了页面初次渲染的负担。")])]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("Tree Shaking 和代码拆分")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 3 对源码进行了优化，支持 Tree Shaking（摇树优化），意味着在构建时，只有用到的功能才会被打包到最终的构建文件中，未使用的功能会被剔除。这使得 Vue 3 的最终包体积更加轻量，加载速度更快。 通过这种方式，Vue 3 不仅在运行时提升了性能，还减少了传输到客户端的 JavaScript 代码量，间接提升了渲染速度。")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("更新时的优化（Patch Flags）")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 3 对虚拟 DOM 更新时的标记机制做了优化，通过 Patch Flags 来标记节点的类型（如：静态节点、动态节点、组件节点等），使得在更新时能够更快速地判断是否需要更新某个节点。\n通过这种方式，Vue 3 仅更新那些确实发生变化的节点，避免了全量更新，提高了渲染效率。")])]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[t._v("组件的异步渲染")])]),t._v(" "),a("ul",[a("li",[t._v("Vue 3 采用了 异步渲染，它可以将组件的渲染过程拆分成多个阶段，分批处理。这样在大规模渲染时，Vue 3 能够避免阻塞主线程，保持页面的响应性。异步渲染和 Suspense 结合使用时，能够使 [Something went wrong, please try again later.]")])]),t._v(" "),a("h3",{attrs:{id:"vue3打包体积比vue2小的原因"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue3打包体积比vue2小的原因"}},[t._v("#")]),t._v(" vue3打包体积比vue2小的原因")]),t._v(" "),a("ol",[a("li",[t._v("Vue 3 使用了 Tree Shaking 支持")]),t._v(" "),a("li",[t._v("模块化设计：在 Vue 3 中，核心库被拆分成多个更小的模块。例如，Vue 3 将 runtime 和 compiler 部分分离，这样开发者可以只选择自己需要的部分进行构建，从而减少了不必要的代码。 Vue 2 采用了较为集中的设计，整个框架通常一起打包，导致体积较大。")]),t._v(" "),a("li",[t._v("更小的运行时：Vue 3 分为 runtime-only 和 runtime + compiler 版本。开发者可以根据自己的需求选择是否包含模板编译器。对于没有使用模板编译器的项目（如直接使用渲染函数），可以使用 runtime-only 版本，这大大减小了框架的体积。 Vue 2 由于模板编译器和运行时是合并的，所以默认体积较大。")]),t._v(" "),a("li",[t._v("更好的组件优化")]),t._v(" "),a("li",[t._v("不再支持 IE 11")])]),t._v(" "),a("h3",{attrs:{id:"vue组件开发data返回对象-实际开发过程中data是通过函数返回一个对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue组件开发data返回对象-实际开发过程中data是通过函数返回一个对象"}},[t._v("#")]),t._v(" vue组件开发data返回对象，实际开发过程中data是通过函数返回一个对象")]),t._v(" "),a("ol",[a("li",[t._v("data 必须是一个返回对象的函数，而不是直接写成对象。这样做是为了确保每个组件实例的数据是独立的，不会出现共享数据的问题。")]),t._v(" "),a("li",[t._v("通过将 data 定义为一个函数，Vue 可以为每个组件实例创建独立的响应式数据，避免多个组件实例共享同一个数据对象。")]),t._v(" "),a("li",[t._v("这种设计使得组件更具可复用性，并且避免了数据干扰问题，符合 Vue 的组件化思想。")])]),t._v(" "),a("h3",{attrs:{id:"nexttick函数干什么的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nexttick函数干什么的"}},[t._v("#")]),t._v(" nextTick函数干什么的")]),t._v(" "),a("p",[t._v("它的作用是将一个回调函数推迟到下次 DOM 更新循环结束之后执行。简单来说，nextTick 用来确保某些操作在 DOM 更新后立即执行，避免因 DOM 未更新而导致的操作错误；"),a("br"),t._v("\n主要用途："),a("br"),t._v("\nDOM 更新后操作：在 Vue 中，数据的变化会触发 DOM 更新。但是，由于 Vue 是异步更新 DOM 的，因此某些代码可能会在数据变化后执行时，无法立即获取到更新后的 DOM 状态。nextTick 就是解决这一问题的工具，它允许你在 DOM 更新后、下一个“tick”时执行代码。"),a("br"),t._v("\n避免同步执行导致的副作用：Vue 会批量处理 DOM 更新，而不是每次数据变化都立即更新 DOM。因此，如果你在数据更新之后立即访问 DOM，可能会获取到未更新的内容。通过 nextTick，你可以确保代码在 DOM 更新之后再执行。")]),t._v(" "),a("h3",{attrs:{id:"单页面和多页面的区别和优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单页面和多页面的区别和优缺点"}},[t._v("#")]),t._v(" 单页面和多页面的区别和优缺点")]),t._v(" "),a("ul",[a("li",[t._v("SPA单页面应用（SinglePage Web Application），指只有一个主页面的应用，一开始只需要加载一次js、css等相关资源。所有内容都包含在主页面，对每一个功能模块组件化。单页应用跳转，就是切换相关组件，仅仅刷新局部资源。")]),t._v(" "),a("li",[t._v("MPA多页面应用 （MultiPage Application），指有多个独立页面的应用，每个页面必须重复加载js、css等相关资源。多页应用跳转，需要整页资源刷新。\n"),a("img",{attrs:{src:s(463),alt:"img.png"}})])]),t._v(" "),a("h3",{attrs:{id:"git提交到线上分支-如何回退"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git提交到线上分支-如何回退"}},[t._v("#")]),t._v(" git提交到线上分支，如何回退")]),t._v(" "),a("ol",[a("li",[t._v("撤销上一次提交（保留代码）："),a("code",[t._v("git reset --soft HEAD~1")])]),t._v(" "),a("li",[t._v("撤销上一次提交（丢弃代码）："),a("code",[t._v("git reset --hard HEAD~1")])]),t._v(" "),a("li",[t._v("回退到指定的提交，而不仅仅是上一个提交（丢弃之后的所有更改），你可以指定该提交的哈希值（SHA-1）："),a("code",[t._v("git reset --hard <commit-hash>")])]),t._v(" "),a("li",[t._v("撤销远程提交（推送到远程分支）使用 git reset 本地回退后推送：先回退本地提交（如1或2操作）再强制推送到远程仓库；")]),t._v(" "),a("li",[t._v("撤销远程提交（推送到远程分支）使用 git revert 创建一个新的回退提交 再推送到远程仓库："),a("code",[t._v("git revert <commit-hash> ``git push origin <branch-name>")]),t._v("； 使用 git revert 的好处是，它不会改变历史记录，适合多人协作的项目；")]),t._v(" "),a("li",[t._v("回退多个提交（可以在 git reset 中使用 HEAD~n，n 是你希望回退的提交数量）再推送到远程仓库时使用 --force："),a("code",[t._v("git reset --hard HEAD~3")]),t._v(" "),a("code",[t._v("git push origin <branch-name> --force")]),a("br"),t._v(" "),a("strong",[t._v("总结：")]),t._v(" "),a("ul",[a("li",[t._v("使用 git reset 撤销提交并选择是否保留文件更改。")]),t._v(" "),a("li",[t._v("使用 git revert 撤销提交并生成新的反向提交，适用于不想修改历史的情况。")]),t._v(" "),a("li",[t._v("回退远程提交时，强制推送 (git push --force) 是必需的，但需要小心，以避免破坏其他人的工作。")])])])]),t._v(" "),a("h3",{attrs:{id:"cherrypick和mrge的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cherrypick和mrge的区别"}},[t._v("#")]),t._v(" cherrypick和mrge的区别")]),t._v(" "),a("ol",[a("li",[t._v("cherry-pick 用来将 单个提交 或 一系列特定提交 从一个分支提取出来，并将它们应用到当前分支。它不会将整个分支的历史记录合并，而是仅仅将选定的提交应用到当前分支。")]),t._v(" "),a("li",[t._v('merge 用于将 两个分支的历史 合并成一个新的提交，通常是将一个功能分支的所有提交合并到主分支。merge 会将两个分支的所有更改合并，并创建一个新的 "合并提交"。')])]),t._v(" "),a("h3",{attrs:{id:"webpack和vite的区别和使用场景分别说一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack和vite的区别和使用场景分别说一下"}},[t._v("#")]),t._v(" webpack和vite的区别和使用场景分别说一下")]),t._v(" "),a("p",[a("img",{attrs:{src:s(464),alt:"img.png"}})]),t._v(" "),a("ol",[a("li",[t._v("Webpack 是一个高度可配置的 JavaScript 应用程序打包工具。它不仅仅是一个构建工具，还包括代码拆分、模块热替换、压缩优化等众多功能。Webpack 适用于构建复杂、规模较大的项目，提供强大的插件和加载器支持，几乎可以处理任何类型的资源。\n"),a("strong",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("配置复杂度高： Webpack 提供了非常多的配置选项，适应不同的需求，但因此配置上相对复杂。")]),t._v(" "),a("li",[t._v("编译方式： Webpack 是一个打包工具，在开发过程中，通常通过监视文件变化来重新打包。")]),t._v(" "),a("li",[t._v("支持插件和加载器： 支持各种类型的插件和加载器，能处理 JS、CSS、图片、字体等不同格式的资源，支持模块化开发。")]),t._v(" "),a("li",[t._v("较长的启动时间： 由于 Webpack 在构建时需要进行复杂的处理，启动和构建时间较长，尤其在大型项目中尤为明显。")]),t._v(" "),a("li",[t._v("兼容性： Webpack 具有更强的兼容性，能够处理传统 JavaScript 项目或更复杂的构建需求。\n"),a("strong",[t._v("适用场景：")])]),t._v(" "),a("li",[t._v("大型项目： Webpack 适合复杂的、需要高度定制化的构建过程，尤其是一些大型的企业级项目。")]),t._v(" "),a("li",[t._v("需要复杂配置的项目： 比如如果项目中有很多不同类型的资源，或者需要精细的代码分割与优化，Webpack 能提供更多灵活的配置和插件支持。")]),t._v(" "),a("li",[t._v("使用到老旧的浏览器兼容性时： Webpack 支持的配置和插件非常丰富，能够适应不同的兼容性要求。")])])]),t._v(" "),a("li",[t._v("Vite 是一个现代化的前端构建工具，专为开发模式下的快速启动和热更新而设计。它"),a("strong",[t._v("基于 ES 模块")]),t._v("，使用现代浏览器的原生支持来优化开发过程，因此具有非常快的启动速度。Vite 的核心思想是将构建过程分为开发和生产两个阶段，其中开发阶段非常轻量，快速启动。\n"),a("strong",[t._v("特点：")]),t._v(" "),a("ul",[a("li",[t._v("快速启动： Vite 的开发模式基于 ES 模块，浏览器本地支持模块化，无需对整个项目进行打包，因此能实现快速的启动和热更新。")]),t._v(" "),a("li",[t._v("即时构建： Vite 使用了基于浏览器支持的 ES 模块化技术，在开发过程中只需要编译和更新修改过的文件，极大提高了开发效率。")]),t._v(" "),a("li",[t._v("构建速度快： 由于采用了现代的技术栈（例如基于 ESBuild 进行构建），Vite 相比 Webpack 在构建速度上有显著优势。")]),t._v(" "),a("li",[t._v("简单配置： Vite 提供了一些默认的配置，开发者可以快速上手，而无需深入复杂的配置。")]),t._v(" "),a("li",[t._v("适合现代浏览器： Vite 主要面向现代浏览器，虽然也支持对旧版浏览器进行转换，但重点放在现代浏览器的优化上。\n"),a("strong",[t._v("适用场景：")])]),t._v(" "),a("li",[t._v("小型或中型项目： Vite 非常适合快速开发和启动的小型项目，尤其是需要快速开发体验和即时反馈的场景。")]),t._v(" "),a("li",[t._v("现代浏览器支持： 如果你的项目主要面向现代浏览器（比如 Chrome、Firefox 等），Vite 的性能和快速启动非常适合。")]),t._v(" "),a("li",[t._v("开发体验优先： Vite 非常适合那些对开发速度和体验有较高要求的项目，尤其是在热重载和快速启动方面表现出色。")]),t._v(" "),a("li",[t._v("组件库或 SPA 项目： Vite 更适合单页面应用（SPA）或组件库开发，能更好地支持按需加载和模块化开发。")])])])]),t._v(" "),a("h3",{attrs:{id:"webpack的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的配置"}},[t._v("#")]),t._v(" webpack的配置")]),t._v(" "),a("p",[a("strong",[t._v("配置说明：")]),t._v(" "),a("code",[t._v("entry:")]),a("br"),t._v("\n指定 Webpack 打包的入口文件。Webpack 从这里开始分析依赖关系，构建模块图。"),a("br"),t._v("\n你可以指定多个入口文件，以支持多个独立的入口（例如多页面应用）。"),a("br"),t._v(" "),a("code",[t._v("output:")]),a("br"),t._v("\npath 是输出目录，filename 是打包后的文件名。在这个示例中，所有打包后的文件会输出到 dist 目录，并命名为 bundle.js。\n你还可以使用动态的 [name] 和 [hash] 来生成带有版本号的文件名，避免缓存问题。"),a("br"),t._v(" "),a("code",[t._v("module:")]),a("br"),t._v("\nrules 用来指定如何处理不同类型的文件。在这个配置中，定义了如何处理 JavaScript (babel-loader)、CSS (style-loader, css-loader) 和图片文件 (file-loader)。\ntest 是一个正则表达式，用来匹配文件，use 列出处理文件的 loader。"),a("br"),t._v(" "),a("code",[t._v("plugins:")]),a("br"),t._v("\nWebpack 插件提供了更强大的功能，例如生成 HTML 文件，优化输出文件等。"),a("br"),t._v("\n在这个示例中，使用了 html-webpack-plugin 插件，它可以自动生成一个 HTML 文件，并引入打包后的 JavaScript 文件。"),a("br"),t._v(" "),a("code",[t._v("devtool:")]),a("br"),t._v("\n配置 source map 的生成，'source-map' 选项会为 JavaScript 文件生成完整的 source map，帮助开发者调试代码。"),a("br"),t._v("\ndevServer:"),a("br"),t._v("\ndevServer 配置 Webpack 开发服务器，提供实时热更新功能。contentBase 指定静态文件目录，port 指定开发服务器的端口，open 自动打开浏览器，hot 启用热模块替换 (HMR)。")]),t._v(" "),a("h3",{attrs:{id:"webpack热更新实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack热更新实现原理"}},[t._v("#")]),t._v(" webpack热更新实现原理")]),t._v(" "),a("p",[a("code",[t._v("WebSocket")])]),t._v(" "),a("h3",{attrs:{id:"loader和plugin的区别和使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别和使用"}},[t._v("#")]),t._v(" loader和plugin的区别和使用")]),t._v(" "),a("p",[a("code",[t._v("Loader")]),a("br"),t._v(" "),a("strong",[t._v("作用")]),t._v("："),a("strong",[a("em",[t._v("Loader 用于处理和转换模块的文件")])]),t._v("。在 Webpack 构建过程中，Loader 会接收文件（例如 .js、.css、.jpg 等），然后根据配置规则将其转换成符合 Webpack 需求的模块。"),a("br"),t._v(" "),a("strong",[t._v("工作过程")]),t._v("：Loader 主要是在 Webpack 编译源代码时对文件进行转换。例如，可以通过 Loader 将 TypeScript 转换为 JavaScript，或者将 SCSS 转换为 CSS。"),a("br"),t._v(" "),a("strong",[t._v("应用范围")]),t._v("：Loader 主要用于文件的转换。它们会处理 文件内容，比如将一个源文件转换成新的文件格式。"),a("br"),t._v(" "),a("strong",[t._v("语法")]),t._v("：Loader 通常是通过 module.rules 来配置的。"),a("br"),t._v(" "),a("code",[t._v("Plugin")]),a("br"),t._v(" "),a("strong",[t._v("作用")]),t._v("：Plugin "),a("em",[a("strong",[t._v("用于扩展 Webpack 的功能")])]),t._v("。它的功能比 Loader 更广泛，可以用于优化构建过程、生成输出文件、环境变量配置等任务。Plugin 会在 Webpack 构建过程的不同阶段运行，从而影响整个构建流程。"),a("br"),t._v(" "),a("strong",[t._v("工作过程")]),t._v("：Plugin 在 Webpack 构建的各个阶段（例如解析、编译、输出）之间工作。它可以访问 Webpack 的内部数据，并对构建过程中的不同阶段进行修改。"),a("br"),t._v(" "),a("strong",[t._v("应用范围")]),t._v("：Plugin 主要用于影响 构建过程 和 输出文件。它们不直接处理文件内容，但可以用来执行诸如打包优化、代码分割、输出 HTML 文件等任务。"),a("br"),t._v(" "),a("strong",[t._v("语法")]),t._v("：Plugin 通常是通过 plugins 配置来配置的。"),a("br"),t._v("\n常见 Loader/Plugin："),a("br"),t._v("\nbabel-loader：将 ES6+ 转换为 ES5。"),a("br"),t._v("\nstyle-loader：将 CSS 插入到 DOM 中。"),a("br"),t._v("\ncss-loader：处理 CSS 文件并将其转换为 JS 模块。"),a("br"),t._v("\nfile-loader：处理文件（例如图像、字体等），并将其复制到输出目录。"),a("br"),t._v("\nsass-loader：将 SASS/SCSS 转换为 CSS。"),a("br"),t._v("\nHtmlWebpackPlugin：生成 HTML 文件并自动插入所有打包好的 JS 和 CSS 文件。"),a("br"),t._v("\nMiniCssExtractPlugin：将 CSS 提取成单独的文件。"),a("br"),t._v("\nCleanWebpackPlugin：在每次构建前清除输出目录。"),a("br"),t._v("\nTerserPlugin：用于压缩和优化 JavaScript 代码。"),a("br"),t._v("\nDefinePlugin：为应用提供全局常量（如环境变量）。")]),t._v(" "),a("h3",{attrs:{id:"某一个loader和plugin的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#某一个loader和plugin的实现"}},[t._v("#")]),t._v(" 某一个loader和plugin的实现")]),t._v(" "),a("p",[a("code",[t._v("sass-loader")]),t._v(" 是一个 Webpack Loader，用于将 SCSS/SASS 文件编译为 CSS 文件。它的实现过程可以分为两个主要步骤：")]),t._v(" "),a("ul",[a("li",[t._v("sass-loader 会将 SCSS/SASS 文件转换为标准的 CSS 文件。它依赖于 Node.js 中的 Sass 库来进行实际的编译。")]),t._v(" "),a("li",[t._v("在 Webpack 构建过程中，sass-loader 会将转换后的 CSS 内容传递给下一个 loader 或插件。"),a("br"),t._v(" "),a("strong",[t._v("工作流程：")]),t._v("\n用户在 Webpack 配置中配置 sass-loader。"),a("br"),t._v("\nsass-loader 会通过 Sass 编译 SCSS/SASS 文件。"),a("br"),t._v("\n编译后的 CSS 会被传递到下一个 loader（如 css-loader 或 style-loader）进行处理，最终插入到 HTML 文件中。\n"),a("code",[t._v("HtmlWebpackPlugin")]),t._v(" 是一个非常常用的 Webpack 插件，用于自动生成 HTML 文件，并将所有打包的资源（如 JS、CSS 文件）自动注入到 HTML 中。"),a("br"),t._v("\n插件会根据提供的模板文件（template）生成一个新的 HTML 文件，并自动处理文件名（例如，生成带有哈希值的 JS 文件名）。"),a("br"),t._v("\n插件会自动将所有 Webpack 输出的资源（如 JS、CSS）注入到生成的 HTML 文件中。通常，JS 文件会通过"),a("code",[t._v("<script>")]),t._v("标签，CSS 文件会通过 "),a("link"),t._v(" 标签注入。"),a("br"),t._v("\n你可以指定一个自定义的 HTML 模板，插件将根据该模板生成最终的 HTML 文件；"),a("br"),t._v(" "),a("strong",[t._v("工作流程：")])]),t._v(" "),a("li",[t._v("HtmlWebpackPlugin 会处理构建过程中生成的所有资源。")]),t._v(" "),a("li",[t._v("插件会在 Webpack 构建后，动态创建一个 HTML 文件并将资源注入其中。")]),t._v(" "),a("li",[t._v("它可以自动处理资源的版本管理（如添加哈希值）并确保生成的 HTML 文件始终是最新的。")])]),t._v(" "),a("h3",{attrs:{id:"微前端的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端的概念"}},[t._v("#")]),t._v(" 微前端的概念")]),t._v(" "),a("h4",{attrs:{id:"微前端的主要特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端的主要特点"}},[t._v("#")]),t._v(" 微前端的主要特点：")]),t._v(" "),a("ol",[a("li",[t._v("模块化：将大型前端应用拆分成多个独立的小模块，每个模块通常由不同的团队负责。")]),t._v(" "),a("li",[t._v("独立性：每个微前端模块都可以独立开发、测试和部署，与其他模块解耦，允许不同的开发周期和技术栈。")]),t._v(" "),a("li",[t._v("技术栈灵活性：不同的微前端模块可以使用不同的前端框架或技术栈，例如 React、Vue、Angular 等，而不需要统一整个项目的技术栈。")]),t._v(" "),a("li",[t._v("共享数据：尽管微前端模块独立，但它们通常通过共享的数据或接口来进行交互。")]),t._v(" "),a("li",[t._v("用户体验一致性：最终呈现给用户的页面要保持一致性，无论是视觉风格还是交互行为。")])]),t._v(" "),a("h4",{attrs:{id:"微前端的实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端的实现方式"}},[t._v("#")]),t._v(" 微前端的实现方式：")]),t._v(" "),a("ol",[a("li",[t._v("单页面应用（SPA）结合微前端：每个微前端模块可以作为一个独立的 SPA，按需加载并渲染到主应用中。")]),t._v(" "),a("li",[t._v("iframe：每个微前端模块都通过 iframe 加载，这样每个模块的样式和行为互相隔离。")]),t._v(" "),a("li",[t._v("Web Components：使用 Web Components 技术封装每个微前端模块，这样它们能够在任何框架或技术栈中运行。")]),t._v(" "),a("li",[t._v("服务器端渲染（SSR）结合微前端：将多个微前端模块的服务器端渲染结果合并，并在客户端进行统一展示。")])]),t._v(" "),a("h4",{attrs:{id:"微前端的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端的优点"}},[t._v("#")]),t._v(" 微前端的优点：")]),t._v(" "),a("ol",[a("li",[t._v("团队独立性：每个团队可以独立开发和部署自己的模块，减少团队之间的依赖和协作成本。")]),t._v(" "),a("li",[t._v("可扩展性：随着项目规模的增长，可以更容易地增加新的微前端模块，避免了单一前端代码库变得庞大和难以维护。")]),t._v(" "),a("li",[t._v("技术栈灵活性：不同的团队可以使用不同的技术栈，选择最适合自己需求的框架和工具。")])]),t._v(" "),a("h4",{attrs:{id:"微前端的挑战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微前端的挑战"}},[t._v("#")]),t._v(" 微前端的挑战：")]),t._v(" "),a("ol",[a("li",[t._v("性能问题：多个微前端模块可能会增加页面的加载时间，尤其是当有很多独立的资源和请求时。")]),t._v(" "),a("li",[t._v("共享状态管理：如何在多个微前端模块之间共享状态或数据，保持一致性是一个挑战。")]),t._v(" "),a("li",[t._v("开发复杂性：不同的技术栈和模块可能会带来集成上的复杂性，需要额外的工作来处理跨模块的交互和样式一致性。")])]),t._v(" "),a("h3",{attrs:{id:"用户使用度的统计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户使用度的统计"}},[t._v("#")]),t._v(" 用户使用度的统计")]),t._v(" "),a("h4",{attrs:{id:"常见的前端用户使用度统计指标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的前端用户使用度统计指标"}},[t._v("#")]),t._v(" 常见的前端用户使用度统计指标：")]),t._v(" "),a("ol",[a("li",[t._v("页面访问量（Page Views）：\n"),a("ul",[a("li",[t._v("记录每个页面的访问次数。可以帮助你了解哪些页面最受欢迎，哪些页面可能需要优化。")])])]),t._v(" "),a("li",[t._v("用户会话（Sessions）：\n"),a("ul",[a("li",[t._v("一次会话通常指用户在同一时间段内访问网站的行为，可能包括多个页面浏览。通过会话统计可以了解用户的活跃程度。")])])]),t._v(" "),a("li",[t._v("平均会话时长（Average Session Duration）：\n"),a("ul",[a("li",[t._v("衡量用户在每次会话中停留的平均时间。较长的会话时间表明用户对内容的兴趣较高。")])])]),t._v(" "),a("li",[t._v("跳出率（Bounce Rate）：\n"),a("ul",[a("li",[t._v("记录用户访问页面后没有进一步互动（例如，离开页面或没有点击其他内容）就离开的比例。高跳出率可能表明页面吸引力不足或者用户找不到所需信息。")])])]),t._v(" "),a("li",[t._v("点击率（Click-Through Rate, CTR）：\n"),a("ul",[a("li",[t._v("统计某些互动元素（如按钮、链接、广告等）的点击次数与展示次数的比率。通过点击率，你可以了解用户对页面上特定内容的兴趣程度。")])])]),t._v(" "),a("li",[t._v("表单提交（Form Submissions）：\n"),a("ul",[a("li",[t._v("统计用户在网页表单中的提交行为，比如注册、登录、调查反馈等。这可以帮助你分析用户在进行这些操作时的行为及其转化效果。")])])]),t._v(" "),a("li",[t._v("事件跟踪（Event Tracking）：\n"),a("ul",[a("li",[t._v("通过跟踪用户与页面元素（按钮、滚动条、图片等）的交互，记录特定行为（如点击、滚动、视频播放、下载文件等）。")]),t._v(" "),a("li",[t._v("事件跟踪可以帮助你了解用户如何与页面交互，哪些功能被频繁使用，哪些功能需要改进。")])])]),t._v(" "),a("li",[t._v("滚动深度（Scroll Depth）：\n"),a("ul",[a("li",[t._v("统计用户在页面中的滚动行为，了解用户浏览了页面的哪些部分。这有助于分析页面内容的可读性和吸引力。")])])]),t._v(" "),a("li",[t._v("页面加载时间（Page Load Time）：\n"),a("ul",[a("li",[t._v("监控页面加载速度和响应时间。较长的加载时间可能导致用户流失，因此需要优化页面的性能。")])])]),t._v(" "),a("li",[t._v("错误监控和日志（Error Tracking）：\n"),a("ul",[a("li",[t._v("统计在用户访问过程中出现的 JavaScript 错误、资源加载失败等问题。常用的工具包括 Sentry 和 LogRocket。")]),t._v(" "),a("li",[t._v("及时解决这些问题能够提升用户体验，减少用户流失。")])])])]),t._v(" "),a("h4",{attrs:{id:"前端统计工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端统计工具"}},[t._v("#")]),t._v(" 前端统计工具")]),t._v(" "),a("p",[t._v("Google Analytics 、Mixpanel、 Amplitude、 Hotjar、 Segment、 Sentry、 LogRocket")]),t._v(" "),a("h3",{attrs:{id:"埋点对前端的使用和价值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#埋点对前端的使用和价值"}},[t._v("#")]),t._v(" 埋点对前端的使用和价值")]),t._v(" "),a("p",[t._v("前端埋点分为手动埋点和自动埋点；"),a("br"),t._v("\n手动埋点是指开发人员通过编写代码显式地在页面上指定需要收集的数据。例如，在按钮点击、表单提交、页面加载等事件上添加监听器，手动发送数据到后台分析系统；"),a("br"),t._v("\n自动埋点是通过集成第三方分析工具（如 Google Analytics、Mixpanel、Amplitude 等）来自动捕捉用户的行为数据。工具会自动收集页面浏览、点击、滚动等行为，并将这些数据自动发送到分析平台。\n埋点的价值：")]),t._v(" "),a("ol",[a("li",[t._v("深入了解用户行为 2. 优化用户体验 3. 监控应用性能 4. 用户留存与激活 5. 跨平台数据整合；")])]),t._v(" "),a("h3",{attrs:{id:"埋点在公共组件-如何确定这个组件在其他页面的调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#埋点在公共组件-如何确定这个组件在其他页面的调用"}},[t._v("#")]),t._v(" 埋点在公共组件，如何确定这个组件在其他页面的调用")]),t._v(" "),a("ol",[a("li",[t._v("通过传递参数或属性标识页面：让组件根据传递的参数来确定页面信息。")]),t._v(" "),a("li",[t._v("使用全局状态管理：利用 Redux 或 Context API 来管理当前页面或模块的状态。")]),t._v(" "),a("li",[t._v("通过页面特征进行标识：自动获取页面 URL 或其他页面特征来进行区分。")]),t._v(" "),a("li",[t._v("为每个页面配置单独的埋点规则：根据不同页面配置不同的埋点行为。")])]),t._v(" "),a("h3",{attrs:{id:"常用埋点的使用原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用埋点的使用原理"}},[t._v("#")]),t._v(" 常用埋点的使用原理")]),t._v(" "),a("h4",{attrs:{id:"事件触发原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件触发原理"}},[t._v("#")]),t._v(" 事件触发原理")]),t._v(" "),a("p",[t._v("埋点的核心原理是捕获用户的操作事件（如点击、滑动、页面加载、表单提交等），并将事件数据发送到后台进行存储和分析。这些事件数据可以包括：")]),t._v(" "),a("ul",[a("li",[t._v("事件名称：例如点击按钮、页面加载等。")]),t._v(" "),a("li",[t._v("事件时间：记录事件发生的时间。")]),t._v(" "),a("li",[t._v("事件属性：记录事件的额外信息，如用户信息、页面路径、按钮的 ID、点击位置等。\n这些信息通常以 JSON 格式发送到服务器或分析平台。事件数据可以通过各种触发方式来收集，比如用户与 UI 元素交互时触发、页面加载时触发、定时触发等。")])]),t._v(" "),a("h4",{attrs:{id:"数据采集和传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据采集和传输"}},[t._v("#")]),t._v(" 数据采集和传输")]),t._v(" "),a("p",[t._v("埋点数据通常通过 HTTP 请求的方式发送到服务器或第三方分析平台。常见的传输方式包括：")]),t._v(" "),a("ul",[a("li",[t._v("HTTP POST 请求：将数据以 JSON 格式发送到后台。")]),t._v(" "),a("li",[t._v("WebSocket：实时收集数据并传输。")]),t._v(" "),a("li",[t._v("Beacon API：一种轻量级的数据传输方式，适合于页面关闭时发送数据。")])]),t._v(" "),a("h4",{attrs:{id:"数据存储与分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据存储与分析"}},[t._v("#")]),t._v(" 数据存储与分析")]),t._v(" "),a("p",[t._v("埋点数据通常会被存储在数据库或日志系统中，后续可以通过数据分析工具（如 Google Analytics、Mixpanel、Apache Kafka 等）进行分析。分析的目标可能包括：")]),t._v(" "),a("ul",[a("li",[t._v("用户行为分析：例如用户访问了哪些页面，点击了哪些按钮，停留了多长时间等。")]),t._v(" "),a("li",[t._v("转化漏斗分析：分析用户在执行特定操作（如注册、购买）过程中每个步骤的流失情况。")]),t._v(" "),a("li",[t._v("性能监控：分析页面加载速度、请求响应时间等性能指标。")])]),t._v(" "),a("h3",{attrs:{id:"监控整个链路-判断用户使用时哪一步有问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#监控整个链路-判断用户使用时哪一步有问题"}},[t._v("#")]),t._v(" 监控整个链路，判断用户使用时哪一步有问题")]),t._v(" "),a("p",[t._v("要监控整个链路并判断用户在使用过程中哪一步出现问题，通常需要结合多种技术和分析手段，来全方位地监控用户行为、分析流程中的瓶颈和错误。通过链路监控，可以帮助你追踪用户从进入产品到完成某个目标（如购买、注册等）过程中每一步的表现，找出用户流失、性能瓶颈或异常问题的原因。"),a("br"),t._v("\n以下是一些常见的策略和技术，帮助实现链路监控并定位问题：")]),t._v(" "),a("h4",{attrs:{id:"_1-定义完整的用户链路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义完整的用户链路"}},[t._v("#")]),t._v(" 1.定义完整的用户链路")]),t._v(" "),a("p",[a("strong",[t._v("首先，需要定义用户的完整操作链路（也称为“用户旅程”）")]),t._v("，这包括：")]),t._v(" "),a("ul",[a("li",[t._v("用户进入点：例如用户通过广告、搜索引擎、直接访问等方式进入网站或应用。")]),t._v(" "),a("li",[t._v("操作步骤：从进入页面开始，用户执行的每一个操作（如浏览商品、添加到购物车、填写表单等）。")]),t._v(" "),a("li",[t._v("目标达成：最终的转化行为，如购买、注册或其他业务目标。"),a("br"),t._v("\n根据这些步骤，你需要确保为每个重要环节设置埋点，并在每个环节中收集和监控用户的数据。")])]),t._v(" "),a("h4",{attrs:{id:"_2-使用链路追踪工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用链路追踪工具"}},[t._v("#")]),t._v(" 2.使用链路追踪工具")]),t._v(" "),a("p",[t._v("链路追踪可以帮助你了解用户在整个操作流程中的每一个环节，尤其在性能监控和错误排查时非常有用。常见的链路追踪工具包括："),a("br"),t._v(" "),a("strong",[t._v("A. 分布式追踪（Distributed Tracing）")]),a("br"),t._v("\n分布式追踪帮助你追踪跨多个服务或系统的请求，了解每个请求在不同服务中的响应时间，以及是否存在性能瓶颈或异常。常用的工具有：")]),t._v(" "),a("ul",[a("li",[t._v("Jaeger：开源的分布式追踪系统，可以帮助你追踪请求的路径，检测瓶颈。")]),t._v(" "),a("li",[t._v("Zipkin：同样是一个分布式追踪系统，用于采集、存储和查询分布式系统的跟踪数据。")]),t._v(" "),a("li",[t._v("OpenTelemetry：一个可扩展的开源框架，用于收集、处理和传输遥测数据（如指标、日志和追踪）。"),a("br"),t._v(" "),a("strong",[t._v("B. 前端监控工具")]),a("br"),t._v("\n这些工具帮助监控前端应用中的性能瓶颈、加载问题或错误，确保用户的操作流畅进行。")]),t._v(" "),a("li",[t._v("Sentry：不仅可以捕捉应用中的异常，还可以捕获性能瓶颈数据，帮助开发者定位问题。")]),t._v(" "),a("li",[t._v("New Relic：可以监控页面加载时间、服务器响应时间以及其他性能指标。")]),t._v(" "),a("li",[t._v("Datadog：提供全面的应用性能监控（APM），帮助追踪每个用户请求的处理时间。")])]),t._v(" "),a("h4",{attrs:{id:"_3-用户行为分析与漏斗分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-用户行为分析与漏斗分析"}},[t._v("#")]),t._v(" 3.用户行为分析与漏斗分析")]),t._v(" "),a("p",[t._v("使用用户行为分析和漏斗分析可以帮助你了解用户在各个环节中的流失情况。漏斗分析会显示用户从一个步骤到下一个步骤的转化率，以及哪些步骤存在问题。"),a("br"),t._v(" "),a("strong",[t._v("漏斗分析")]),a("br"),t._v("\n通过设置漏斗分析，你可以观察到："),a("br"),t._v("\n转化漏斗：从用户进入页面到完成最终目标（如购买、注册等）的各个环节。每个环节的转化率可以帮助你发现用户在哪一步流失。"),a("br"),t._v("\n示例漏斗：")]),t._v(" "),a("ol",[a("li",[t._v("用户访问网站首页")]),t._v(" "),a("li",[t._v("用户浏览产品页面")]),t._v(" "),a("li",[t._v("用户将商品加入购物车")]),t._v(" "),a("li",[t._v("用户填写支付信息")]),t._v(" "),a("li",[t._v("用户完成购买\n如果在步骤 3 到步骤 4 之间出现大量流失，可能存在支付页面加载慢、表单设计复杂或支付系统问题等，需要进一步分析。"),a("br"),t._v(" "),a("strong",[t._v("行为分析工具：")])])]),t._v(" "),a("ul",[a("li",[t._v("Mixpanel：可以帮助你做漏斗分析，追踪用户的行为流向，找出用户在何时何地流失。")]),t._v(" "),a("li",[t._v("Amplitude：提供详细的用户行为分析，包括漏斗分析、留存率、用户流失分析等。")])]),t._v(" "),a("h4",{attrs:{id:"_4-实时性能监控"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-实时性能监控"}},[t._v("#")]),t._v(" 4.实时性能监控")]),t._v(" "),a("p",[a("strong",[t._v("在监控链路的过程中，实时性能监控非常重要")]),t._v("。你可以实时追踪请求的响应时间、页面加载时间以及任何性能瓶颈。"),a("br"),t._v(" "),a("code",[t._v("Page Load Monitoring：通过监控页面的加载时间，确保页面能够在合理时间内加载完成，避免因加载时间过长导致用户流失。")]),a("br"),t._v("\n工具：Google Lighthouse、Web Vitals、Pingdom。"),a("br"),t._v(" "),a("code",[t._v("API 请求监控：监控用户请求后端接口的响应时间、错误率等，帮助定位在后端处理过程中出现的瓶颈或错误。")]),a("br"),t._v("\n工具：Datadog、Prometheus、Grafana。")]),t._v(" "),a("h4",{attrs:{id:"_5-设置告警与自动化响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-设置告警与自动化响应"}},[t._v("#")]),t._v(" 5.设置告警与自动化响应")]),t._v(" "),a("p",[t._v("一旦发生异常情况（如性能瓶颈、错误率激增等），需要设置告警系统，及时通知开发人员或者运维人员，以便快速响应和处理。"),a("br"),t._v(" "),a("strong",[t._v("常见的告警系统：")])]),t._v(" "),a("ul",[a("li",[t._v("Prometheus + Alertmanager：Prometheus 用于收集系统和应用的指标数据，Alertmanager 可以根据定义的规则发送告警。")]),t._v(" "),a("li",[t._v("Grafana：可以与 Prometheus 配合使用，设置数据面板并在阈值触发时发送告警。")]),t._v(" "),a("li",[t._v("PagerDuty：提供自动化告警管理，确保在发生重大问题时，团队能及时响应。")])]),t._v(" "),a("h4",{attrs:{id:"_6-错误跟踪与日志分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-错误跟踪与日志分析"}},[t._v("#")]),t._v(" 6.错误跟踪与日志分析")]),t._v(" "),a("p",[t._v("实时捕获并分析错误信息有助于及时发现问题，尤其是前端或后端的错误。通过全面的日志分析，可以快速定位用户问题的根源。"),a("br"),t._v(" "),a("strong",[t._v("错误跟踪工具：")])]),t._v(" "),a("ul",[a("li",[t._v("Sentry：提供前端和后端错误监控，帮助你实时捕捉和分析应用中的错误。")]),t._v(" "),a("li",[t._v("LogRocket：记录用户会话，回放用户操作，帮助开发人员了解用户遇到的具体问题。")]),t._v(" "),a("li",[t._v("Elasticsearch + Kibana (ELK Stack)：提供强大的日志分析功能，帮助分析错误日志和性能瓶颈。")])]),t._v(" "),a("h4",{attrs:{id:"_7-用户反馈与会话重放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-用户反馈与会话重放"}},[t._v("#")]),t._v(" 7. 用户反馈与会话重放")]),t._v(" "),a("p",[t._v("除了数据分析，还可以通过用户反馈或者会话重放来进一步了解用户在使用过程中的困惑或问题。")]),t._v(" "),a("ul",[a("li",[t._v("用户反馈：通过问卷调查、在线客服或用户评价来收集用户的意见，了解他们在使用产品时遇到的困难。")]),t._v(" "),a("li",[t._v("会话重放：通过工具记录用户的实际操作过程，回放用户的点击、滑动等行为，帮助开发人员直观地看到用户遇到的问题。"),a("br"),t._v(" "),a("strong",[t._v("用户反馈工具：")]),a("br"),t._v("\nHotjar：提供热图、用户录屏、调查问卷等功能，帮助分析用户的操作和反馈。"),a("br"),t._v("\nFullStory：用户会话重放工具，帮助开发者回放用户的具体操作流程。")])]),t._v(" "),a("h3",{attrs:{id:"优化大屏渲染方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化大屏渲染方案"}},[t._v("#")]),t._v(" 优化大屏渲染方案")]),t._v(" "),a("p",[a("code",[t._v("前端优化大屏渲染的几个关键方向")])]),t._v(" "),a("h4",{attrs:{id:"_1-使用虚拟化技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用虚拟化技术"}},[t._v("#")]),t._v(" 1. 使用虚拟化技术")]),t._v(" "),a("p",[t._v("大屏展示通常涉及大量的图表、组件或数据，而一次性渲染所有内容会严重影响性能。虚拟化技术可以有效提升渲染效率，减少浏览器的负担。"),a("br"),t._v(" "),a("strong",[t._v("列表虚拟化")]),a("br"),t._v("\n如果大屏涉及长列表或大数据量的图表，虚拟化技术可以只渲染当前视口内的元素，滚动时动态加载其他元素。"),a("br"),t._v("\nReact Virtualized、React Window（适用于React应用）"),a("br"),t._v("\nVue Virtual Scroller（适用于Vue应用）"),a("br"),t._v(" "),a("strong",[t._v("视图虚拟化")]),a("br"),t._v("\n对于包含多个独立元素（如卡片、图表、面板等）的页面，可以使用视图虚拟化，只渲染当前可见区域的内容。通过减少DOM节点的数量来提升性能。")]),t._v(" "),a("h4",{attrs:{id:"_2-canvas-和-webgl-渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-canvas-和-webgl-渲染"}},[t._v("#")]),t._v(" 2. Canvas 和 WebGL 渲染")]),t._v(" "),a("p",[t._v("对于复杂的图表和数据可视化，直接使用HTML元素（如div或SVG）会增加DOM的复杂度。可以使用Canvas或WebGL来实现高效的渲染，尤其在处理大量动态元素时。"),a("br"),t._v(" "),a("strong",[t._v("Canvas")]),a("br"),t._v("\nCanvas是一个图形绘制API，通过它可以直接在画布上绘制图形、图表等。对于不需要频繁交互的静态内容，Canvas是非常高效的选择。"),a("br"),t._v("\nChart.js、D3.js（支持Canvas）"),a("br"),t._v("\nPixiJS（适用于高性能2D图形渲染）"),a("br"),t._v(" "),a("strong",[t._v("WebGL")]),a("br"),t._v("\n对于需要复杂图形渲染或3D可视化的场景，可以使用WebGL。WebGL利用GPU的计算能力，能高效处理复杂的渲染任务。"),a("br"),t._v("\nThree.js（适用于3D可视化）"),a("br"),t._v("\nRegl（更底层的WebGL封装，提供更高性能的控制）")]),t._v(" "),a("h4",{attrs:{id:"_3-懒加载和按需加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-懒加载和按需加载"}},[t._v("#")]),t._v(" 3. 懒加载和按需加载")]),t._v(" "),a("p",[t._v("为了提升初始加载速度，可以采用懒加载和按需加载策略，避免一次性加载所有资源。这样用户能够更快地看到重要内容，并且后续需要时才加载剩余资源。"),a("br"),t._v(" "),a("strong",[t._v("懒加载组件：")]),a("br"),t._v("\n对于大屏中的多个面板或图表，可以使用懒加载技术，只有在用户需要查看时才加载该组件。"),a("br"),t._v("\nReact Lazy + Suspense"),a("br"),t._v("\nVue Async Components"),a("br"),t._v(" "),a("strong",[t._v("资源懒加载：")]),a("br"),t._v('\n对于图片、视频等大文件，使用IntersectionObserver或loading="lazy"来延迟加载这些资源，减少初始渲染的压力。')]),t._v(" "),a("h4",{attrs:{id:"_4-高效的动画渲染"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-高效的动画渲染"}},[t._v("#")]),t._v(" 4. 高效的动画渲染")]),t._v(" "),a("p",[t._v("大屏展示中，动态数据和动画展示是非常常见的。如果使用不当，动画可能导致页面性能下降。"),a("br"),t._v(" "),a("strong",[t._v("优化动画")]),a("br"),t._v("\nrequestAnimationFrame：避免使用setInterval或setTimeout来执行动画，requestAnimationFrame能够同步动画到屏幕刷新率，减少不必要的渲染。"),a("br"),t._v("\nCSS 动画：对于简单的动画，优先使用CSS动画，它能利用硬件加速，提升性能。"),a("br"),t._v("\nWeb Animations API：适用于较为复杂的动画需求，相比传统的CSS动画和JavaScript动画，它具有更高的性能。")]),t._v(" "),a("h4",{attrs:{id:"_5-web-workers-和-offscreencanvas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-web-workers-和-offscreencanvas"}},[t._v("#")]),t._v(" 5. Web Workers 和 OffscreenCanvas")]),t._v(" "),a("p",[t._v("Web Workers 是一种允许JavaScript在主线程外部并行运行的方式，非常适合处理复杂计算或大规模数据分析，从而避免阻塞UI线程。"),a("br"),t._v(" "),a("strong",[t._v("使用 Web Worker：")]),a("br"),t._v("\n在数据处理过程中，将计算密集型任务交给Web Worker处理，避免影响主线程的渲染。\n"),a("strong",[t._v("OffscreenCanvas：")]),a("br"),t._v("\n在Web Worker中使用OffscreenCanvas，可以让图形渲染的计算在后台进行，并将结果传递到主线程进行显示。")]),t._v(" "),a("h4",{attrs:{id:"_6-减少dom操作与重排重绘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-减少dom操作与重排重绘"}},[t._v("#")]),t._v(" 6. 减少DOM操作与重排重绘")]),t._v(" "),a("p",[t._v("频繁的DOM操作和页面重排重绘会导致性能问题，尤其是在复杂的前端应用中。"),a("br"),t._v(" "),a("strong",[t._v("优化DOM操作：")]),a("br"),t._v("\n批量DOM操作：通过将多个DOM操作合并，减少重排和重绘的次数。可以使用documentFragment来进行批量更新。"),a("br"),t._v("\n避免强制同步布局：通过getBoundingClientRect()、offsetHeight等API会强制浏览器计算布局，尽量避免在动画或渲染中频繁访问这些属性。")]),t._v(" "),a("h4",{attrs:{id:"_7-使用适当的图像格式和大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-使用适当的图像格式和大小"}},[t._v("#")]),t._v(" 7. 使用适当的图像格式和大小")]),t._v(" "),a("p",[t._v("大屏通常需要处理大量图像数据，选择合适的图像格式和尺寸对于性能至关重要。"),a("br"),t._v("\n图像格式选择："),a("br"),t._v("\nWebP：相比JPEG和PNG格式，WebP图像能够提供更小的文件大小，同时保持较好的质量。"),a("br"),t._v("\nSVG：对于图标、简单图形等，优先使用SVG，它比图片格式更轻便且支持无限缩放。"),a("br"),t._v("\n懒加载图像：对于大屏背景图或不在当前视口内的图像，可以采用懒加载的策略。")]),t._v(" "),a("h4",{attrs:{id:"_8-图表优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-图表优化"}},[t._v("#")]),t._v(" 8. 图表优化")]),t._v(" "),a("p",[t._v("如果大屏应用需要展示大量的数据或复杂的图表，确保图表的渲染是经过优化的。"),a("br"),t._v(" "),a("strong",[t._v("优化图表：")]),a("br"),t._v("\n减少图表的DOM节点：将图表绘制为Canvas或SVG，避免使用过多的DOM节点。"),a("br"),t._v("\n图表分批加载：如果图表数据量大，可以采用分批加载的方式，逐步渲染。"),a("br"),t._v("\n动态渲染：对于大数据集，可以通过动态加载和动态更新来减少每次渲染的工作量。")]),t._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结：")]),t._v(" "),a("p",[t._v("前端优化大屏渲染的关键在于减少DOM操作、减少不必要的重排重绘、采用高效的渲染技术、使用懒加载和按需加载来避免一次性加载大量内容，以及合理利用硬件加速和后台计算。结合虚拟化、Canvas/WebGL渲染、图表优化等技术，可以大大提高大屏应用的性能，确保流畅的用户体验。")]),t._v(" "),a("h3",{attrs:{id:"如何去衡量你优化前后的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何去衡量你优化前后的区别"}},[t._v("#")]),t._v(" 如何去衡量你优化前后的区别")]),t._v(" "),a("p",[t._v("为了衡量优化前后的区别，你需要从多个角度进行分析，包括页面加载时间、渲染性能、资源加载、内存使用、交互响应时间等。通过具体的性能指标对比，能够清晰地判断优化是否成功，提高了用户体验和系统的整体性能。")]),t._v(" "),a("h4",{attrs:{id:"_1-页面加载时间-page-load-time"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-页面加载时间-page-load-time"}},[t._v("#")]),t._v(" 1. 页面加载时间（Page Load Time）")]),t._v(" "),a("p",[t._v("如何衡量：使用浏览器开发者工具（如"),a("strong",[t._v("Chrome DevTools")]),t._v("）或者使用专门的性能监控工具（如L"),a("strong",[t._v("ighthouse")]),t._v("）。"),a("br"),t._v("\n首次内容绘制（FCP，First Contentful Paint）：页面上第一个DOM元素绘制出来的时间。"),a("br"),t._v("\n最大内容绘制（LCP，Largest Contentful Paint）：页面上最大的内容元素（如图像、文本块等）绘制出来的时间。"),a("br"),t._v("\n交互准备时间（TTI，Time to Interactive）：页面完全加载并且能够响应用户输入的时间。"),a("br"),t._v("\n优化前后对比：对比优化前后FCP、LCP、TTI等指标的变化，看看页面加载是否变得更快，交互性是否提高。")]),t._v(" "),a("h4",{attrs:{id:"_2-帧率-frame-rate-和渲染性能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-帧率-frame-rate-和渲染性能"}},[t._v("#")]),t._v(" 2. 帧率（Frame Rate）和渲染性能")]),t._v(" "),a("p",[t._v("在大屏应用中，流畅的动画和交互对于用户体验至关重要。帧率的稳定性直接影响到视觉效果。"),a("br"),t._v("\n如何衡量：使用浏览器的Performance标签（Chrome DevTools）来监测每秒渲染的帧数。理想情况下，浏览器每秒要渲染60帧（60fps），否则会感到卡顿。"),a("br"),t._v("\n帧率波动：监测帧率的波动情况，看看是否有频繁掉帧的现象。"),a("br"),t._v("\n优化前后对比：通过比较优化前后帧率的波动，判断动画、数据可视化、图表等内容渲染的流畅性是否有所改善。")]),t._v(" "),a("h4",{attrs:{id:"_3-cpu-和内存消耗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-cpu-和内存消耗"}},[t._v("#")]),t._v(" 3. CPU 和内存消耗")]),t._v(" "),a("p",[t._v("优化后，页面的CPU和内存消耗应该有所下降，尤其是在渲染密集型的操作中。"),a("br"),t._v("\n如何衡量：使用Chrome DevTools的Performance面板来查看CPU和内存使用情况。\nCPU 使用：监测渲染、脚本执行等操作的CPU消耗。"),a("br"),t._v("\n内存使用：检查页面是否存在内存泄漏，优化后内存使用是否得到了优化。"),a("br"),t._v("\n优化前后对比：通过对比优化前后的CPU和内存消耗情况，判断优化是否减少了不必要的资源消耗。")]),t._v(" "),a("h4",{attrs:{id:"_4-网络请求和资源加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-网络请求和资源加载"}},[t._v("#")]),t._v(" 4. 网络请求和资源加载")]),t._v(" "),a("p",[t._v("对于大屏应用而言，资源的加载速度和大小也至关重要。优化应该能够减少资源加载时间，并降低网络请求的数量和大小。"),a("br"),t._v("\n如何衡量：使用Chrome DevTools的Network面板，查看所有的网络请求、资源大小、请求时间等。"),a("br"),t._v("\n请求数量：优化后，是否减少了不必要的请求。"),a("br"),t._v("\n资源大小：压缩后的图片、脚本、样式表等资源大小。"),a("br"),t._v("\n加载时间：资源加载是否变得更快。"),a("br"),t._v("\n优化前后对比：对比优化前后的资源请求数量和加载时间，看看是否达到了更快的资源加载速度。")]),t._v(" "),a("h4",{attrs:{id:"_5-交互响应时间-interaction-to-next-paint-inp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-交互响应时间-interaction-to-next-paint-inp"}},[t._v("#")]),t._v(" 5. 交互响应时间（Interaction to Next Paint，INP）")]),t._v(" "),a("p",[t._v("用户与页面交互的响应时间，是另一个关键的用户体验指标。优化后，交互响应时间应有所降低，使得页面更加敏感和易用。"),a("br"),t._v("\n如何衡量：使用Lighthouse中的INP指标或者Chrome DevTools的Performance面板。"),a("br"),t._v("\n交互延迟：用户点击按钮、滚动页面等交互后，页面响应的速度。"),a("br"),t._v("\n首次响应时间：页面第一次响应用户输入的时间。"),a("br"),t._v("\n优化前后对比：比较优化前后交互响应时间，看看用户交互是否变得更及时和流畅。")]),t._v(" "),a("h4",{attrs:{id:"_6-视觉稳定性-cumulative-layout-shift-cls"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-视觉稳定性-cumulative-layout-shift-cls"}},[t._v("#")]),t._v(" 6. 视觉稳定性（Cumulative Layout Shift，CLS）")]),t._v(" "),a("p",[t._v("页面布局的稳定性直接影响用户体验，尤其是在加载资源的过程中。如果页面内容频繁重新布局，可能导致用户体验不佳。"),a("br"),t._v("\n如何衡量：使用Lighthouse工具中的CLS指标，衡量页面在加载过程中，布局不稳定的程度。"),a("br"),t._v("\n布局移动：监测页面元素在加载过程中是否发生了明显的位移。"),a("br"),t._v("\n优化前后对比：如果优化后页面的布局移动减少了，说明视觉稳定性有所提升。")]),t._v(" "),a("h4",{attrs:{id:"_7-用户体验-ux-测试和用户反馈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-用户体验-ux-测试和用户反馈"}},[t._v("#")]),t._v(" 7. 用户体验（UX）测试和用户反馈")]),t._v(" "),a("p",[t._v("除了技术指标，实际用户的反馈也是衡量优化效果的关键之一。可以通过用户调查、A/B测试或者使用用户行为分析工具来评估。"),a("br"),t._v("\n如何衡量：通过用户行为分析工具（如Hotjar、Google Analytics）来监测用户与页面的互动情况。"),a("br"),t._v("\n用户流失率：优化后页面的用户流失是否降低。"),a("br"),t._v("\n页面互动率：页面的点击、滚动、互动等行为是否有所增加。"),a("br"),t._v("\n用户满意度：通过用户反馈、NPS评分等方式收集用户对页面性能的满意度。")]),t._v(" "),a("h4",{attrs:{id:"_8-实际案例-前后对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-实际案例-前后对比"}},[t._v("#")]),t._v(" 8. 实际案例：前后对比")]),t._v(" "),a("p",[t._v("假设在优化前，页面加载时间为10秒，帧率波动较大，网络请求量为100个，页面的内存使用较高。经过优化后，页面加载时间降至4秒，帧率稳定在60fps，网络请求减少至60个，内存使用降低了20%。"),a("br"),t._v("\n通过这些具体的性能数据，可以清晰地看出优化的效果，说明页面在加载速度、性能稳定性、资源使用等方面都得到了显著的提升。")]),t._v(" "),a("h3",{attrs:{id:"node进程和父子通信"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node进程和父子通信"}},[t._v("#")]),t._v(" node进程和父子通信")]),t._v(" "),a("p",[t._v("在 Node.js 中，父进程和子进程之间的通信通常是通过 "),a("strong",[t._v("进程间通信 (IPC, Inter-Process Communication) 来实现的")]),t._v("。常用的方式是通过 "),a("code",[t._v("fork()")]),t._v("创建子进程，并使用 process.send() 和 process.on('message') 来进行消息传递。下面是详细的解释和示例。"),a("br"),t._v(" "),a("strong",[t._v("父进程与子进程通信的基本流程")])]),t._v(" "),a("ul",[a("li",[t._v("父进程创建子进程: 使用 fork() 方法，父进程可以创建一个新的子进程，子进程会执行指定的 JavaScript 文件。")]),t._v(" "),a("li",[t._v("消息传递: 父进程和子进程通过 process.send() 发送消息，子进程通过 process.on('message', callback) 接收消息，反之亦然  。"),a("br"),t._v(" "),a("strong",[t._v("执行流程")])])]),t._v(" "),a("ol",[a("li",[t._v("执行 parent.js。")]),t._v(" "),a("li",[t._v("父进程创建一个子进程，子进程开始执行 child.js。")]),t._v(" "),a("li",[t._v("父进程向子进程发送一个消息 { hello: 'world' }。")]),t._v(" "),a("li",[t._v("子进程接收到消息后，打印并返回一个响应消息 { received: 'Hello from child' }。")]),t._v(" "),a("li",[t._v("父进程接收到子进程返回的消息，并打印出响应。")])]),t._v(" "),a("h3",{attrs:{id:"如何查看栈内存占用信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何查看栈内存占用信息"}},[t._v("#")]),t._v(" 如何查看栈内存占用信息")]),t._v(" "),a("p",[t._v("**直接查看栈内存占用：**没有直接的 API，但可以通过间接方式如 process.memoryUsage() 或 DevTools 的堆分析工具来推测栈内存的使用情况。"),a("br"),t._v(" "),a("strong",[t._v("堆栈溢出检测")]),t._v("：通过堆栈跟踪和错误处理来分析栈溢出问题。"),a("br"),t._v(" "),a("strong",[t._v("V8 引擎内存参数")]),t._v("：通过调整 --stack-size 等 V8 参数来管理栈内存大小。")]),t._v(" "),a("h3",{attrs:{id:"洋葱模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#洋葱模型"}},[t._v("#")]),t._v(" 洋葱模型")]),t._v(" "),a("p",[t._v("在 Express.js 等 Node.js 框架中，中间件的执行流程就是典型的洋葱模型，具体表现为："),a("br"),t._v(" "),a("strong",[t._v("请求到达服务器")]),t._v("：客户端发送请求，经过每个中间件层的处理。"),a("br"),t._v(" "),a("strong",[t._v("外层中间件处理")]),t._v("：最外层的中间件可以进行日志记录、请求验证等。"),a("br"),t._v(" "),a("strong",[t._v("核心逻辑中间件")]),t._v("：逐步传递到核心业务逻辑的处理。"),a("br"),t._v(" "),a("strong",[t._v("内层中间件处理")]),t._v("：最后，可以进行响应的处理，如错误处理、修改响应等。"),a("br"),t._v(" "),a("strong",[t._v("响应返回")]),t._v("：数据返回给客户端，过程中可能再次经过中间件处理。"),a("br"),t._v("\n中间件的工作方式是：每个中间件都能对请求进行处理、修改，或者决定是否将请求继续传递给下一个中间件。如果需要终止请求-响应循环，可以在某个中间件中发送响应，终止处理流程。\n"),a("strong",[t._v("外层中间件")]),t._v("：最先执行的中间件，通常用于记录请求信息、验证请求等。"),a("br"),t._v(" "),a("strong",[t._v("核心中间件")]),t._v("：处理核心业务逻辑。"),a("br"),t._v(" "),a("strong",[t._v("内层中间件")]),t._v("：如果有错误发生，内层中间件负责捕获并处理这些错误。"),a("br"),t._v(" "),a("strong",[t._v("洋葱模型的执行顺序：")]),a("br"),t._v("\n当请求到达时，外层中间件先执行（从外向内），依次通过所有中间件。"),a("br"),t._v("\n如果中间件没有发送响应且没有出现错误，它会通过 next() 继续将请求传递到下一个中间件。"),a("br"),t._v("\n最后，响应返回给客户端的过程是“从内向外”回退，每层的中间件可以修改响应。")]),t._v(" "),a("h3",{attrs:{id:"json-stringfy-方法有什么缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json-stringfy-方法有什么缺点"}},[t._v("#")]),t._v(" JSON.Stringfy()方法有什么缺点")]),t._v(" "),a("p",[t._v("JSON.stringify() 方法的缺点包括无法处理函数、循环引用、特殊值（如 undefined、NaN 等）、日期对象、正则表达式等，且可能会改变对象的键名顺序、丢失不可枚举属性，并在处理大型对象时出现性能问题。"),a("br"),t._v("\n在使用时需要特别注意这些限制。如果需要解决这些问题，可以考虑使用 replacer 参数、手动处理特定的值或使用第三方库。")]),t._v(" "),a("h3",{attrs:{id:"web安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web安全"}},[t._v("#")]),t._v(" Web安全")]),t._v(" "),a("p",[a("strong",[t._v("常见的 Web 安全问题：")]),t._v("。\nSQL 注入（SQL Injection）、跨站脚本攻击（XSS，Cross-Site Scripting）、跨站请求伪造（CSRF，Cross-Site Request Forgery）、会话劫持（Session Hijacking）、文件上传漏洞、远程代码执行（RCE，Remote Code Execution）"),a("br"),t._v(" "),a("strong",[t._v("Web 安全最佳实践：")]),a("br"),t._v("\n使用 HTTPS（SSL/TLS 加密）、用户身份验证与授权、输入验证与输出编码、定期进行安全审计与渗透测试、使用 Web 应用防火墙（WAF）、日志监控与异常检测")]),t._v(" "),a("h3",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),a("h4",{attrs:{id:"减少-http-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少-http-请求"}},[t._v("#")]),t._v(" 减少 HTTP 请求")]),t._v(" "),a("p",[t._v("每次加载一个网页，浏览器都会发送 HTTP 请求，因此减少请求数量是加速加载的关键。")]),t._v(" "),a("ul",[a("li",[t._v("合并 CSS 和 JavaScript 文件。")]),t._v(" "),a("li",[t._v("使用 CSS Sprites 技术将多个小图片合成一张大图，减少图片请求数量。")]),t._v(" "),a("li",[t._v("使用 "),a("link",{attrs:{rel:"preload"}}),t._v(" 标签提前加载关键资源。")])]),t._v(" "),a("h4",{attrs:{id:"资源压缩和优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源压缩和优化"}},[t._v("#")]),t._v(" 资源压缩和优化")]),t._v(" "),a("ul",[a("li",[t._v("CSS、JavaScript 和 HTML 压缩：通过去除不必要的空格、换行、注释等，减少文件大小。")]),t._v(" "),a("li",[t._v("图片优化：压缩图片，使用适当的格式（如 WebP 或 JPEG 2000）。还可以使用像 ImageMagick 或 TinyPNG 这样的工具进行图片压缩。")]),t._v(" "),a("li",[t._v("懒加载（Lazy Loading）：对图片、视频或其他资源实施懒加载，即只有当它们进入视窗时才加载。")])]),t._v(" "),a("h4",{attrs:{id:"浏览器缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[t._v("#")]),t._v(" 浏览器缓存")]),t._v(" "),a("p",[t._v("利用浏览器缓存可以避免重复加载资源，从而减少请求时间和带宽消耗。")]),t._v(" "),a("ul",[a("li",[t._v("设置适当的缓存策略，使用 Cache-Control 和 ETag 等 HTTP 头。")]),t._v(" "),a("li",[t._v("使用版本控制（例如，在资源的 URL 中添加哈希值）确保缓存资源得到更新。")])]),t._v(" "),a("h4",{attrs:{id:"cdn-内容分发网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cdn-内容分发网络"}},[t._v("#")]),t._v(" CDN（内容分发网络）")]),t._v(" "),a("p",[t._v("使用 CDN 可以将静态资源分发到全球多个节点，减少用户与服务器之间的距离，从而加速资源加载速度。")]),t._v(" "),a("h4",{attrs:{id:"异步加载资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步加载资源"}},[t._v("#")]),t._v(" 异步加载资源")]),t._v(" "),a("ul",[a("li",[t._v("对非关键资源（如广告、社交分享按钮等）采用异步加载或延迟加载的方式，避免阻塞页面的渲染过程。")]),t._v(" "),a("li",[t._v("使用 async 或 defer 属性来异步加载 JavaScript 脚本。")])]),t._v(" "),a("h4",{attrs:{id:"减少重定向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少重定向"}},[t._v("#")]),t._v(" 减少重定向")]),t._v(" "),a("p",[t._v("每次页面重定向都会增加额外的 HTTP 请求和响应，因此应尽量减少重定向的次数。")]),t._v(" "),a("h4",{attrs:{id:"压缩网络传输数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩网络传输数据"}},[t._v("#")]),t._v(" 压缩网络传输数据")]),t._v(" "),a("p",[t._v("使用 Gzip 或 Brotli 等压缩算法对传输的文本数据（如 HTML、CSS、JavaScript）进行压缩，减小数据传输量。"),a("br"),t._v("\n对图片、音视频文件也可使用合适的压缩算法。")]),t._v(" "),a("h4",{attrs:{id:"http-2-和-http-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-2-和-http-3"}},[t._v("#")]),t._v(" HTTP/2 和 HTTP/3")]),t._v(" "),a("p",[t._v("使用 HTTP/2 可以提升并行请求的效率，减少延迟。"),a("br"),t._v("\nHTTP/3 基于 QUIC 协议，比 HTTP/2 更加高效，尤其适合高延迟的网络环境。")]),t._v(" "),a("h4",{attrs:{id:"减少-dns-查询时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少-dns-查询时间"}},[t._v("#")]),t._v(" 减少 DNS 查询时间")]),t._v(" "),a("p",[t._v("使用 DNS 预解析技术，减少域名解析的延迟。"),a("br"),t._v("\n避免频繁的跨域请求，减少 DNS 查询次数。")]),t._v(" "),a("h4",{attrs:{id:"优化网络带宽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化网络带宽"}},[t._v("#")]),t._v(" 优化网络带宽")]),t._v(" "),a("p",[t._v("优化传输的数据量，避免发送过多的冗余信息。"),a("br"),t._v("\n对传输的请求和响应内容进行最小化。")]),t._v(" "),a("h3",{attrs:{id:"白屏优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#白屏优化"}},[t._v("#")]),t._v(" 白屏优化")]),t._v(" "),a("h4",{attrs:{id:"提高页面渲染速度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提高页面渲染速度"}},[t._v("#")]),t._v(" 提高页面渲染速度")]),t._v(" "),a("p",[a("strong",[t._v("减少阻塞资源的加载：")]),a("br"),t._v("\n异步加载 CSS 和 JavaScript：使用 async 或 defer 属性让 JavaScript 异步加载，避免阻塞页面的渲染。"),a("br"),t._v("\n避免阻塞的字体加载：使用 font-display: swap 来确保字体加载时不阻塞页面渲染。"),a("br"),t._v(" "),a("strong",[t._v("优化资源加载顺序：")]),t._v("\n使用 "),a("link",{attrs:{rel:"preload"}}),t._v(" 标签提前加载关键的资源，如 CSS 和 JavaScript 文件，优先确保页面核心内容能够尽快渲染。"),a("br"),t._v(" "),a("strong",[t._v("减少资源的请求数量和大小：")]),a("br"),t._v("\n合并 CSS 和 JavaScript 文件，减少 HTTP 请求数。"),a("br"),t._v("\n压缩图片和其他静态资源，使用 WebP 格式等减少文件大小。")]),t._v(" "),a("h4",{attrs:{id:"提高关键渲染路径的效率"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提高关键渲染路径的效率"}},[t._v("#")]),t._v(" 提高关键渲染路径的效率")]),t._v(" "),a("p",[a("strong",[t._v("优化渲染过程：")]),t._v(" 减少页面加载过程中的不必要的渲染和计算，例如减少页面中的复杂布局和重绘。"),a("br"),t._v(" "),a("strong",[t._v("延迟渲染非关键内容：")]),t._v(" 对于不需要立即渲染的部分，使用懒加载技术（Lazy Loading）来延迟加载，比如图片、视频和第三方广告等。"),a("br"),t._v(" "),a("strong",[t._v("采用 SSR 或预渲染：")]),t._v(" 对于 React、Vue 等单页面应用，使用服务端渲染（SSR）或静态生成（如 Next.js、Nuxt.js）来预生成页面内容，从而缩短白屏时间。")]),t._v(" "),a("h4",{attrs:{id:"优先显示关键内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优先显示关键内容"}},[t._v("#")]),t._v(" 优先显示关键内容")]),t._v(" "),a("p",[a("strong",[t._v("首屏内容优先加载：")]),t._v(" 确保用户能够尽早看到重要的页面内容，比如文字、图片等，避免等待 JavaScript 执行后才显示内容。"),a("code",[t._v("可以使用服务器端渲染（SSR）或预渲染（Pre-render）技术")]),t._v("。"),a("br"),t._v(" "),a("strong",[t._v("占位符和骨架屏（Skeleton Screen）：")]),a("br"),t._v("\n使用骨架屏技术，在内容加载过程中显示一个占位的骨架布局，让用户感知到页面正在加载，而不是看到一片空白。"),a("br"),t._v("\n通过在页面上显示加载状态、渐变效果等，让用户知道内容正在加载。")]),t._v(" "),a("h4",{attrs:{id:"缓存机制的优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制的优化"}},[t._v("#")]),t._v(" 缓存机制的优化")]),t._v(" "),a("p",[a("strong",[t._v("利用浏览器缓存：")]),t._v(" 对不频繁更新的资源（如图片、字体等）设置缓存策略，避免每次加载都重新请求资源。"),a("br"),t._v(" "),a("strong",[t._v("服务工作者（Service Workers）：")]),t._v(" 使用 Service Workers 提前缓存常用资源，在用户访问时可以直接从缓存加载内容，减少加载时间。"),a("br"),t._v(" "),a("strong",[t._v("利用 HTTP/2 或 HTTP/3：")]),t._v(" 这两个协议都"),a("code",[t._v("支持多路复用和并发请求")]),t._v("，从而提高多个资源加载的效率，减少白屏时间。")]),t._v(" "),a("h4",{attrs:{id:"减少-javascript-执行的延迟"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少-javascript-执行的延迟"}},[t._v("#")]),t._v(" 减少 JavaScript 执行的延迟")]),t._v(" "),a("p",[a("strong",[t._v("代码拆分和按需加载：")]),a("br"),t._v("\n对大型 JavaScript 文件进行代码拆分，将非核心功能的代码延迟加载。比如可以使用 Webpack 的代码分割功能，确保首先加载的代码只有渲染首屏所需的部分。"),a("br"),t._v(" "),a("strong",[t._v("减少 JavaScript 执行时间：")]),a("br"),t._v("\n优化 JavaScript 代码，减少计算和复杂操作。尽量避免长时间阻塞主线程的任务，可以通过 Web Workers 将一些耗时的计算转移到后台线程。")]),t._v(" "),a("h4",{attrs:{id:"显示加载提示信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#显示加载提示信息"}},[t._v("#")]),t._v(" 显示加载提示信息")]),t._v(" "),a("p",[t._v('加载提示和动画：在页面加载过程中，可以通过动画、进度条或提示信息（如 "加载中..."）来告知用户页面正在加载。即便是短暂的加载，也能有效减少白屏给用户带来的困扰。\n预加载和加载器：根据页面内容的复杂度，提供更具用户友好体验的加载器（如旋转的圆圈或进度条）。')]),t._v(" "),a("h4",{attrs:{id:"减少外部资源依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少外部资源依赖"}},[t._v("#")]),t._v(" 减少外部资源依赖")]),t._v(" "),a("p",[t._v("减少外部第三方库或资源：如广告、社交分享插件等第三方脚本，这些资源可能会影响页面的加载速度。对这些资源进行异步加载或延迟加载。"),a("br"),t._v("\n审查和优化第三方 JavaScript：如果必须使用第三方脚本，应该尽量选择性能更好的第三方服务，并减少对页面加载的阻塞影响。")]),t._v(" "),a("h4",{attrs:{id:"优化首屏加载时间-fcp-和首个有效内容-lcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化首屏加载时间-fcp-和首个有效内容-lcp"}},[t._v("#")]),t._v(" 优化首屏加载时间（FCP）和首个有效内容（LCP）")]),t._v(" "),a("p",[t._v("优化 FCP 和 LCP（Largest Contentful Paint）：确保在页面加载的前几秒钟内，用户能够看到页面的主要内容。优化这些指标有助于减少白屏时间。"),a("br"),t._v("\n增加服务端响应速度：确保服务器响应时间尽量短，避免因为后端响应延迟而导致前端加载缓慢。")]),t._v(" "),a("h3",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),a("h4",{attrs:{id:"模块化模式-module-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块化模式-module-pattern"}},[t._v("#")]),t._v(" 模块化模式（Module Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 模块化模式将相关的代码组织在一起，通过封装暴露接口，来实现代码的高内聚低耦合。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 前端代码的组织与管理。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 使用 JavaScript 的 IIFE（立即调用函数表达式）或 ES6 的模块（import 和 export）来创建模块。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myModule "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" privateVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'This is private'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("publicMethod")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("privateVar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmyModule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("publicMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'This is private'")]),t._v("\n")])])]),a("h4",{attrs:{id:"观察者模式-observer-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式-observer-pattern"}},[t._v("#")]),t._v(" 观察者模式（Observer Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 观察者模式用于定义对象间的一对多依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都会得到通知并自动更新。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 适用于事件监听、UI 更新和数据绑定。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 在 React 或 Vue.js 中，状态的变化会导致视图的更新，这是一种观察者模式的实现。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventEmitter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listener"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("events"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("listener")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" emitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nemitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'greet'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Output: 'Hello!'")]),t._v("\n")])])]),a("h4",{attrs:{id:"单例模式-singleton-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-singleton-pattern"}},[t._v("#")]),t._v(" 单例模式（Singleton Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 单例模式确保某个类只有一个实例，并提供一个全局访问点来获取该实例。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 常用于创建全局状态、配置管理、日志记录、缓存等。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 在前端框架中，常常使用单例模式来创建全局状态或服务。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Singleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nSingleton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Singleton")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instance1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" instance2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h4",{attrs:{id:"工厂模式-factory-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式-factory-pattern"}},[t._v("#")]),t._v(" 工厂模式（Factory Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 工厂模式定义一个接口用于创建对象，但由子类决定实例化哪一个类。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 当你不知道实例化哪个类时，或需要通过配置动态创建对象时，工厂模式非常有用。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 在前端开发中，可以根据不同的条件生成不同的UI组件或控件。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Button")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Rendering a Button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextInput")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Rendering a TextInput'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UIComponentFactory")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Button")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'textInput'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TextInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" button "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UIComponentFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'button'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbutton"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Rendering a Button'")]),t._v("\n")])])]),a("h4",{attrs:{id:"策略模式-strategy-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式-strategy-pattern"}},[t._v("#")]),t._v(" 策略模式（Strategy Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 策略模式定义了一系列算法，并将每一个算法封装起来，使它们可以互换。策略模式让算法的变化独立于使用算法的客户端。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 当需要动态选择不同的算法或行为时，比如排序算法、支付方式等。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 支付方式选择")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreditCardPayment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("amount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Paying '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" amount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' using Credit Card'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PayPalPayment")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("amount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Paying '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" amount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' using PayPal'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PaymentContext")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("paymentMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("paymentMethod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" paymentMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("amount")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("paymentMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("amount"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cardPayment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CreditCardPayment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" paypalPayment "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PayPalPayment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" paymentContext "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PaymentContext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cardPayment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npaymentContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pay")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'Paying 100 using Credit Card'")]),t._v("\n")])])]),a("h4",{attrs:{id:"装饰器模式-decorator-pattern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式-decorator-pattern"}},[t._v("#")]),t._v(" 装饰器模式（Decorator Pattern）")]),t._v(" "),a("p",[a("strong",[t._v("定义：")]),t._v(" 装饰器模式允许动态地给一个对象添加额外的功能，而不改变其结构。"),a("br"),t._v(" "),a("strong",[t._v("应用场景：")]),t._v(" 常用于增强现有对象的功能，如对UI组件、功能模块进行装饰。"),a("br"),t._v(" "),a("strong",[t._v("例子：")]),t._v(" 在 React 中使用 HOC（高阶组件）增强组件功能。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withLogging")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Component rendered with props:'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("MyComponent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MyComponentWithLogging "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withLogging")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyComponent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h3",{attrs:{id:"前端导入的文件存哪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端导入的文件存哪"}},[t._v("#")]),t._v(" 前端导入的文件存哪")]),t._v(" "),a("p",[t._v("文件的存储通常是在后端服务器上进行的，前端通过 HTTP 请求（如 POST 请求）将文件上传至后端，后端接受文件"),a("strong",[t._v("并将其保存在服务器的指定目录或云存储服务中")]),t._v("。"),a("br"),t._v(" "),a("strong",[t._v("后端存储路径：")])]),t._v(" "),a("ul",[a("li",[t._v("后端通常会有一个专门的文件存储位置，可能会存储在本地服务器的某个目录下，或者使用云存储服务（如 AWS S3、阿里云 OSS、Google Cloud Storage 等）。")]),t._v(" "),a("li",[t._v("例如：/uploads/images/ 或 /uploads/documents/。"),a("br"),t._v(" "),a("strong",[t._v("文件管理：")]),a("br"),t._v("\n后端可以对上传的文件进行处理，如校验文件类型、文件大小、病毒扫描等。"),a("br"),t._v("\n如果需要，后端可以返回一个文件的存储路径或 URL，供前端使用。")])]),t._v(" "),a("h3",{attrs:{id:"websorket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websorket"}},[t._v("#")]),t._v(" websorket")]),t._v(" "),a("h3",{attrs:{id:"localstorage-sessionstorage-cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#localstorage-sessionstorage-cookie"}},[t._v("#")]),t._v(" localStorage/sessionStorage/cookie")]),t._v(" "),a("h3",{attrs:{id:"重绘和回流-重排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重绘和回流-重排"}},[t._v("#")]),t._v(" 重绘和回流（重排）")])])}),[],!1,null,null,null);a.default=r.exports}}]);